var fs = require('fs');
var gulp = require('gulp');
var wiredep = require('wiredep');
var plugins = require('gulp-load-plugins')();
var less = require('gulp-less');
var path = require('path');
var util = require('util');
var fmt = util.format;

gulp.task('default', ['build', 'test', 'watch']);

gulp.task('build', [
    'build-less',
    'build-version',
], function() {
  // Remove the env var
  process.env.GULP_ANGULAR_CODEGEN = undefined;
});

gulp.task('build-less', function(done) {
  return gulp.src('./client/less/style.less')
    .pipe(less()).on('error', function(err) {
      //catch error so we don't crash the watcher
      console.error(err);
      done();
    })
    .pipe(gulp.dest('./client/www/style/'));
});

gulp.task('watch', ['build'], function() {
  // Watch all the .less files, then run the less tasks
  gulp.watch('./client/less/**/*.less', ['build-less']);
});

gulp.task('build-version', function(callback) {
  var pkg = require('./package.json');
  var title = 'StrongLoop Central';
  var titleAndVersion = title + ' ' + pkg.version;
  var content =
    '// This file is generated by `gulp build`. Do not edit manually!' +
    '\ndocument.title = ' + JSON.stringify(title) +
    '\ndocument.querySelector(".header-version").innerHTML = ' +
    JSON.stringify(titleAndVersion) + ';' +
    '\n';

  var filepath = path.resolve(
    __dirname, 'client', 'www', 'scripts', 'version.js'
  );

  fs.writeFile(filepath, content, 'utf-8', callback);
});

gulp.task('install', function() {
    return gulp.src(['./bower.json', './package.json']).pipe(plugins.install());
  }
);

gulp.task('vendor-scripts', ['install'], function() {
  return gulp.src(wiredep().js)
    .pipe(gulp.dest('./client/build/vendor'));
});

gulp.task('lib-scripts', function() {
  return gulp.src('./client/www/lib/**').pipe(gulp.dest('./client/build/lib/'));
});

gulp.task('arc-scripts', function() {
  return gulp.src('./client/www/scripts/**')
    .pipe(plugins.react())
    .pipe(gulp.dest('./client/build/scripts/'));
});

gulp.task('arc-style', function() {
  return gulp.src('./client/www/style/**')
    .pipe(gulp.dest('./client/build/style/'));
});

gulp.task('vendor-css', ['install'], function() {
  return gulp.src(wiredep().css)
    .pipe(gulp.dest('./client/build/vendor'));
});

gulp.task('arc-images', ['install'], function() {
  return gulp.src('./client/www/images/**')
    .pipe(gulp.dest('./client/build/images/'));
});

gulp.task('update-index',
  [
    'vendor-scripts', 'vendor-css',
    'lib-scripts',
    'arc-scripts', 'arc-style', 'arc-images'
  ],
  function() {
    return gulp.src('./client/www/index.html')
      .pipe(wiredep.stream(
      {
        fileTypes: {
          html: {
            replace: {
              js: function(filePath) {
                return fmt(
                  '<script src="vendor/%s"></script>',
                  filePath.split('/').pop()
                );
              },
              css: function(filePath) {
                return fmt(
                  '<link rel="stylesheet" href="%s"/>',
                  'vendor/' + filePath.split('/').pop()
                );
              }
            },
          },
        },
      }))
      .pipe(plugins.inject(
        gulp.src(
          [
            'client/build/lib/**/*.js',
            'client/build/scripts/**/*.js',
          ],
          {read: false}
        ), {
          addRootSlash: false,
          transform: function(filePath) {
            return fmt(
              '<script src="%s"></script>',
              filePath.replace('client/build/', '')
            );
          }
        })
      )
      // .pipe(plugins.inject(
      //   gulp.src(['build/assets/**/*.css'], { read: false }), {
      //   addRootSlash: false,
      //   transform: function(filePath, file, i, length) {
      //     return '<link rel="stylesheet" href="' + filePath.replace('build/', '') + '"/>';
      //   }
      // }))
      .pipe(gulp.dest('./client/build/'));
  }
);
